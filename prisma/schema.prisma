generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  roles     RolePermission[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  users       Users[]
}

model RolePermission {
  id          Int     @id @default(autoincrement())
  state       Boolean
  permission  Permission   @relation(fields: [permissionId], references: [id])
  permissionId Int
  role        Role   @relation(fields: [roleId], references: [id])
  roleId      Int
}
model Charge{
  id Int @id @default(autoincrement())
  name String
  state Boolean @default(true)
  users       Users[]
}
model Department{
  id Int @id @default(autoincrement())
  name String
  state Boolean @default(true)
  users       Users[]
}


model Users {
  id          Int      @id @default(autoincrement())
  email       String?   @unique
  name        String?
  password    String?
  token       String?
  token_type  String?
  role Role? @relation(fields: [roleId], references: [id])
  roleId Int?
  Department Department ? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  Charge Charge ? @relation(fields: [chargeId], references: [id])
  chargeId Int?
  state  Boolean? @default(true)
  createdAt DateTime @default(now())
  areaCharge AreaCharge[]
  asignatureProjects AsignatureProjects[]
}

model AreaCharge {
  id        Int        @id @default(autoincrement())
  name      String
  state     Boolean
  Users     Users?     @relation(fields: [userId], references: [id])
  userId    Int?
  projects  AreaChargeToProject[] 
asignatureProjects AsignatureProjects[]
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String
  createdAt     DateTime      @default(now())
  finishDate    DateTime?
  motiveDemore  String?
  observation   String?
  state         String?
  description   String?
  areaCharges   AreaChargeToProject[]
  material Material ? @relation(fields: [materialId], references: [id])
  materialId Int?
  asignatureProjects AsignatureProjects[]
}
model AreaChargeToProject {
  id            Int           @id @default(autoincrement())
  areaCharge    AreaCharge?   @relation(fields: [areaChargeId], references: [id])
  areaChargeId  Int?
  project       Project?      @relation(fields: [projectId], references: [id])
  projectId     Int?
}
model Material{
  id Int @id @default(autoincrement())
  name String
  description String
  codeReferences String
  project Project[]
}

model AsignatureProjects{
  id Int @id @default(autoincrement())
startDate DateTime  @default(now())
finishDate DateTime
project Project? @relation(fields: [projectId], references: [id])
projectId Int?
User Users? @relation(fields: [userId], references: [id])
userId Int?
areaCharge AreaCharge @relation(fields: [areaChargeId],references: [id])
areaChargeId Int
}